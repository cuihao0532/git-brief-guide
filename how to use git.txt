# created by cuish
# 2017年9月12日 22:14:21


1、设置全局用户名、email
git config --global user.name "cuish"
git config --global user.email "xxx@163.com"

2、在本地创建一个git仓库
git init

3、把文件添加到 stage 暂存区
git add file.txt



4、把文件从stage暂存区提交到仓库当前分支
#一次性把暂存区的所有修改提交大仓库

git commit -m "这里是提交注释"


5、可以多次往stage暂存区添加，然后一次性提交到仓库当前分支
git add file1.txt
git add file2.txt

git commit -m "commit two files"


6、查看仓库状态
git status

#修改文件后没有往state添加
git status
输出
#On branch master
#Changes not staged for commit:
# (user "git add <file>..." to update what will be committed)
# (user "git checkout -- <file> ..." to discard changes in working directory)

# modified: file.txt
no changes added to commit (use "git add" and/or "git commit -a")

#使用 git add file.txt 添加暂存区
#使用 git checkout -- file.txt 放弃工作区的更改


7、查看工作区做了什么修改
git diff file.txt


8、文件添加到stage暂存区后查看仓库状态
git add file.txt
git status
输出
#On branch master
#Changes to be committed:
# (use "reset HEAD <file>..." to unstage)
# modified: file.txt

#可以被提交的改变
#使用 git reset HEAD <file> 放弃对暂存区的添加


9、查看日志
git log

#以每次单行形式查看日志
git loig --pretty=oneline


10、版本回退

#回退到上一个版本
git reset --hard HEAD^

#回退到上2个版本
git reset --hard HEAD^^

#回退到上100个版本
git reset --hard HEAD~100

如果回退的版本超过最多的版本次数则报错


#回退到指定版本（以commit id前几位43q5453指定版本号）
git reset --hard 43q5453


11、查看每一次git命令
git reflog


12、工作区
本地计算机的git仓库目录

13、版本库

#版本库中有一个重要的区域叫stage暂存区
git add 把文件的修改添加到暂存区

#版本库中的版本分支
创建git仓库时自动创建一个master分支
git commit 把暂存区的所有内容提交到当前分支



14、查看工作区与当前版本库最新版本的区别
git diff HEAD -- file.txt


15、文件修改后未add到stage暂存区时放弃修改
git checkout -- file.txt

16、文件已经添加到stage暂存区时放弃修改
git reset HEAD file.txt


17、文件已经commit仓库时放弃修改
#查看版本回退


18、删除文件
#从本地工作区删除文件
del file.txt

#把删除更新到stage工作区
git rm file.txt

#把文件从版本库删除
git commit -m "delete file.txt"


19、添加远程仓库

#创建SSH key（windows下可能要把git bin目录添加到path环境变量）
ssh-keygen -t rsa -C "xxx@163.com"

#本地已有仓库，关联到远程仓库（origin为远程库的默认名字）
git remote add origin git@github.com:cuihao0532/gitname.git

#第一次把本地仓库推送/关联到远程空仓库master分支
git push -u origin master

#在本地提交后推送到远程仓库master分支
git push origin master

20、从远程仓库克隆

#ssh协议
git clone git@github.com:cuihao0532/gitname.git

#https协议
git clone https://github.com/cuihao0532/gitname.git


21、分支

#创建dev分支
git branch dev

#切换到dev分支
git checkout dev

#创建并切换到dev分支
git branch -b dev

#查看（当前）分支
git branch
输出分支列表，在当前分支前有*注明

#查看（当前）本地及远程分支
git branch -a


#把指定分支与当前分支合并
#当前为master分支，把dev分支与当前分支合并
git merge dev


#删除dev分支
git branch -d dev

#强制删除dev分支
git branch -D dev

#删除远程分支

#从远程仓库删除dev分支
git push origin :dev



22、冲突

#合并代码后可能会产生冲突
#合并dev分支到当前分支
git merge dev
输出 
Auto-merfing file.txt
CONFICT (content): Merge config in file.txt
Automatic merge failed; fix conficts and then commit the result.

#编辑该蔡冲突的文件
#提交解决后的文件
git add file.txt
git commit -m "resolve conficts"
#删除dev分支
git branch -d dev


23、Fast forward模式
合并分支时git会用[Fast forward]模式，这种模式下分出分支后会丢失分支信息。

#强制禁用 Fast forward 模式合并dev分支到当前分支，并添加注释
git merge --no-ff -m "merge with no-ff" dev

#加上--no-ff参数后的合并方式，合并后的历史有分支，能看出来曾经做过合并

#用git log查看分支历史
git log --graph --pretty=oneline --abbrev-commit

24、储藏工作现场
#如果当前分支有还没有提交的
git stash

#当前分支为dev，有修改后的文件file.txt没有git add 或 没有git commit，则
#当切换至master分支时，在dev分支上对file.txt做的修改会带到master分支上
#在dev分支上执行git stash后，dev分支就变成了干净的；切换至master分支后不会把在dev分支上尚未add/commit的修改带到maste分支

#重新切换回dev分支后，查看stash
git stash list
输出
stash@{0}: WIP on dev:532512 add merge

#恢复dev分支上的stash内容
git stash apply stash@{0}

#删除dev分支上保存的stash内容
git stash drop

#恢复的同时删除stash内容
git stash pop


25、查看远程库
git remote

#查看远程库的详细信息
git remote -v


26、把本地当前分支上的所有提交推送到远程库
#推送到远程库origin的master分支
git push origin master

#推送到远程库origin的dev分支
git push origin dev


27、从远程库克隆到本地
git clone git@github.com:cuihao0532/xxx.git

#查看克隆后的本地分支（默认只能看到master分支）
git branch
输出
* master

#创建远程库的dev分支到本地
git checkout -b dev origin/dev


28、推送时的冲突
#当人对同一个文件git push origin dev产生冲突时，推送失败
#拉取当前远程库的文件到本地
git pull

#git pull失败，需要指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream dev origin/dev

#再次拉取成功
git pull

#解决冲突，git add / git commit 后再次push



29、标签

#在当前分支最新commit上打tag
git tag v1.0 -m "this is comments"


#在当前分支的某个指定的commit id 5032da 上打tag
git tag v1.0 -m "this is comments for a commit-id" 5032da
 

#在当前分支的某个指定的commit id 5032da 上打tag，并且用私钥签名一个tag（ 使用 -s 参数）
git tag  -s v1.0  -m "this is a tag for commid-id 899cf6e" 899cf6e


#显示当前所有标签
git tag


#显示某个tag的信息
git tag v1.1


#删除标签
git tag -d v1.1

#把创建的标签推送到远程仓库
git push origin v1.0

#一次性把本地的标签都推送到远程仓库
git push origin --tags


#从远程仓库删除tag
#先从本地删除
git tag -d v1.0 
#再推送到远程
git push origin :refs/tags/v1.0













